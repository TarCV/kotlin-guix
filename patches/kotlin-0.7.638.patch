diff --git a/build.xml b/build.xml
index 25eeb38c3bc..516ce5d97a5 100644
--- a/build.xml
+++ b/build.xml
@@ -48,7 +48,7 @@
       <then>
         <path id="javac2.classpath">
           <pathelement location="${idea.sdk}/lib/javac2.jar"/>
-          <pathelement location="${idea.sdk}/lib/asm4-all.jar"/>
+          <pathelement location="${idea.sdk}/core/asm-all.jar"/>
         </path>
         <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
         <echo message="Use javac2 from Idea lib"/>
@@ -613,7 +613,7 @@
 
     <!-- builds redistributables from sources -->
     <target name="dist"
-            depends="clean,init,prepareDist,preloader,builtins,compiler,compilerSources,antTools,jdkAnnotations,androidSdkAnnotations,runtime,runtime_sources,jslib"/>
+            depends="clean,init,prepareDist,preloader,builtins,compiler,compilerSources,antTools,jdkAnnotations,androidSdkAnnotations,runtime,runtime_sources"/>
 
     <!-- builds everything, but classes are reused from project out dir, doesn't run proguard and javadoc -->
     <target name="dist_quick"
diff --git a/core/descriptors/src/org/jetbrains/jet/lang/types/lang/InlineUtil.java b/core/descriptors/src/org/jetbrains/jet/lang/types/lang/InlineUtil.java
index 70389518aa1..1ef0a757db6 100644
--- a/core/descriptors/src/org/jetbrains/jet/lang/types/lang/InlineUtil.java
+++ b/core/descriptors/src/org/jetbrains/jet/lang/types/lang/InlineUtil.java
@@ -60,7 +60,7 @@ public class InlineUtil {
     private static AnnotationDescriptor getAnnotation(@Nullable Annotations annotations, @NotNull ClassDescriptor annotationClass) {
         if (annotations != null) {
             for (AnnotationDescriptor annotation : annotations) {
-                if (annotationClass.equals(annotation.getType().getConstructor().getDeclarationDescriptor())) {
+                if (annotation != null && annotationClass.equals(annotation.getType().getConstructor().getDeclarationDescriptor())) {
                     return annotation;
                 }
             }
diff --git a/libraries/stdlib/src/kotlin/io/JIO.kt b/libraries/stdlib/src/kotlin/io/JIO.kt
index 2136380db87..83a273644f0 100644
--- a/libraries/stdlib/src/kotlin/io/JIO.kt
+++ b/libraries/stdlib/src/kotlin/io/JIO.kt
@@ -199,7 +199,7 @@ public fun Writer.buffered(bufferSize: Int = defaultBufferSize): BufferedWriter
 public fun Reader.forEachLine(block: (String) -> Unit): Unit = useLines { lines -> lines.forEach(block) }
 
 public inline fun <T> Reader.useLines(block: (Stream<String>) -> T): T =
-        this.buffered().use { block(it.lines()) }
+        this.buffered().use { block(it.lineSequence()) }
 
 /**
  * Returns an iterator over each line.
@@ -209,10 +209,10 @@ public inline fun <T> Reader.useLines(block: (Stream<String>) -> T): T =
  * <br>
  * We suggest you try the method useLines() instead which closes the stream when the processing is complete.
  */
-public fun BufferedReader.lines(): Stream<String> = LinesStream(this)
+public fun BufferedReader.lineSequence(): Stream<String> = LinesStream(this)
 
 deprecated("Use lines() function which returns Stream<String>")
-public fun BufferedReader.lineIterator(): Iterator<String> = lines().iterator()
+public fun BufferedReader.lineIterator(): Iterator<String> = lineSequence().iterator()
 
 class LinesStream(val reader: BufferedReader) : Stream<String> {
     override fun iterator(): Iterator<String> {
