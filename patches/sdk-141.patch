diff --git a/build.xml b/build.xml
index 8e6bdbcfa226..3e99367cf8ac 100644
--- a/build.xml
+++ b/build.xml
@@ -16,7 +16,7 @@
     <attribute name="script" />
     <sequential>
       <java failonerror="true" jar="${project.home}/lib/ant/lib/ant-launcher.jar" fork="true">
-        <jvmarg line="-Xmx612m -XX:MaxPermSize=152m"/>
+        <jvmarg line="-Xmx4096m"/>
         <sysproperty key="java.awt.headless" value="true"/>
         <arg line="&quot;-Dgant.script=@{script}&quot;"/>
         <arg line="&quot;-Dteamcity.build.tempDir=${tmp.dir}&quot;"/>
--- a/java/compiler/javac2/src/com/intellij/ant/Javac2.java
+++ b/java/compiler/javac2/src/com/intellij/ant/Javac2.java
@@ -18,9 +18,6 @@
 import com.intellij.compiler.instrumentation.InstrumentationClassFinder;
 import com.intellij.compiler.instrumentation.InstrumenterClassWriter;
 import com.intellij.compiler.notNullVerification.NotNullVerifyingInstrumenter;
-import com.intellij.uiDesigner.compiler.*;
-import com.intellij.uiDesigner.lw.CompiledClassPropertiesProvider;
-import com.intellij.uiDesigner.lw.LwRootContainer;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.taskdefs.Javac;
@@ -240,86 +237,7 @@
       log("No forms to instrument found", Project.MSG_VERBOSE);
       return;
     }
-
-    final HashMap class2form = new HashMap();
-
-    for (int i = 0; i < formsToInstrument.size(); i++) {
-      final File formFile = (File)formsToInstrument.get(i);
-
-      log("compiling form " + formFile.getAbsolutePath(), Project.MSG_VERBOSE);
-      final LwRootContainer rootContainer;
-      try {
-        rootContainer = Utils.getRootContainer(formFile.toURI().toURL(), new CompiledClassPropertiesProvider(finder.getLoader()));
-      }
-      catch (AlienFormFileException e) {
-        // ignore non-IDEA forms
-        continue;
-      }
-      catch (Exception e) {
-        fireError("Cannot process form file " + formFile.getAbsolutePath() + ". Reason: " + e);
-        continue;
-      }
-
-      final String classToBind = rootContainer.getClassToBind();
-      if (classToBind == null) {
-        continue;
-      }
-
-      String name = classToBind.replace('.', '/');
-      File classFile = getClassFile(name);
-      if (classFile == null) {
-        log(formFile.getAbsolutePath() + ": Class to bind does not exist: " + classToBind, Project.MSG_WARN);
-        continue;
-      }
-
-      final File alreadyProcessedForm = (File)class2form.get(classToBind);
-      if (alreadyProcessedForm != null) {
-        fireError(formFile.getAbsolutePath() +
-                  ": " +
-                  "The form is bound to the class " +
-                  classToBind +
-                  ".\n" +
-                  "Another form " +
-                  alreadyProcessedForm.getAbsolutePath() +
-                  " is also bound to this class.");
-        continue;
-      }
-      class2form.put(classToBind, formFile);
-
-      try {
-        int version;
-        InputStream stream = new FileInputStream(classFile);
-        try {
-          version = getClassFileVersion(new ClassReader(stream));
-        }
-        finally {
-          stream.close();
-        }
-        AntNestedFormLoader formLoader = new AntNestedFormLoader(finder.getLoader(), myNestedFormPathList);
-        InstrumenterClassWriter classWriter = new InstrumenterClassWriter(getAsmClassWriterFlags(version), finder);
-        final AsmCodeGenerator codeGenerator = new AsmCodeGenerator(rootContainer, finder, formLoader, false, classWriter);
-        codeGenerator.patchFile(classFile);
-        final FormErrorInfo[] warnings = codeGenerator.getWarnings();
-
-        for (int j = 0; j < warnings.length; j++) {
-          log(formFile.getAbsolutePath() + ": " + warnings[j].getErrorMessage(), Project.MSG_WARN);
-        }
-        final FormErrorInfo[] errors = codeGenerator.getErrors();
-        if (errors.length > 0) {
-          StringBuffer message = new StringBuffer();
-          for (int j = 0; j < errors.length; j++) {
-            if (message.length() > 0) {
-              message.append("\n");
-            }
-            message.append(formFile.getAbsolutePath()).append(": ").append(errors[j].getErrorMessage());
-          }
-          fireError(message.toString());
-        }
-      }
-      catch (Exception e) {
-        fireError("Forms instrumentation failed for " + formFile.getAbsolutePath() + ": " + e.toString());
-      }
-    }
+    fireError("Form instrumentation is not supported. Found forms: " + formsToInstrument);
   }

   /**
@@ -520,59 +431,4 @@
     return new InstrumentationClassFinder(urlsArr);
   }

-  private class AntNestedFormLoader implements NestedFormLoader {
-    private final ClassLoader myLoader;
-    private final List myNestedFormPathList;
-    private final HashMap myFormCache = new HashMap();
-
-    public AntNestedFormLoader(final ClassLoader loader, List nestedFormPathList) {
-      myLoader = loader;
-      myNestedFormPathList = nestedFormPathList;
-    }
-
-    public LwRootContainer loadForm(String formFilePath) throws Exception {
-      if (myFormCache.containsKey(formFilePath)) {
-        return (LwRootContainer)myFormCache.get(formFilePath);
-      }
-
-      String lowerFormFilePath = formFilePath.toLowerCase();
-      log("Searching for form " + lowerFormFilePath, Project.MSG_VERBOSE);
-      for (Iterator iterator = myFormFiles.iterator(); iterator.hasNext();) {
-        File file = (File)iterator.next();
-        String name = file.getAbsolutePath().replace(File.separatorChar, '/').toLowerCase();
-        log("Comparing with " + name, Project.MSG_VERBOSE);
-        if (name.endsWith(lowerFormFilePath)) {
-          return loadForm(formFilePath, new FileInputStream(file));
-        }
-      }
-
-      if (myNestedFormPathList != null) {
-        for (int i = 0; i < myNestedFormPathList.size(); i++) {
-          PrefixedPath path = (PrefixedPath)myNestedFormPathList.get(i);
-          File formFile = path.findFile(formFilePath);
-          if (formFile != null) {
-            return loadForm(formFilePath, new FileInputStream(formFile));
-          }
-        }
-      }
-      InputStream resourceStream = myLoader.getResourceAsStream(formFilePath);
-      if (resourceStream != null) {
-        return loadForm(formFilePath, resourceStream);
-      }
-      throw new Exception("Cannot find nested form file " + formFilePath);
-    }
-
-    private LwRootContainer loadForm(String formFileName, InputStream resourceStream) throws Exception {
-      final LwRootContainer container = Utils.getRootContainer(resourceStream, null);
-      myFormCache.put(formFileName, container);
-      return container;
-    }
-
-    public String getClassToBindName(LwRootContainer container) {
-      final String className = container.getClassToBind();
-      String result = getClassOrInnerName(className.replace('.', '/'));
-      if (result != null) return result.replace('/', '.');
-      return className;
-    }
-  }
 }
--- a/java/java-psi-impl/src/com/intellij/core/JavaCoreApplicationEnvironment.java
+++ b/java/java-psi-impl/src/com/intellij/core/JavaCoreApplicationEnvironment.java
@@ -81,6 +81,12 @@
     addExplicitExtension(LanguageParserDefinitions.INSTANCE, JavaLanguage.INSTANCE, new JavaParserDefinition());
     addExplicitExtension(LanguageConstantExpressionEvaluator.INSTANCE, JavaLanguage.INSTANCE, new PsiExpressionEvaluator());

+    registerApplicationExtensionPoint(ContainerProvider.EP_NAME, com.intellij.codeInsight.ContainerProvider.class);
+    registerApplicationExtensionPoint(com.intellij.openapi.fileTypes.ContentBasedFileSubstitutor.EP_NAME, com.intellij.openapi.fileTypes.ContentBasedFileSubstitutor.class);
+    registerApplicationExtensionPoint(com.intellij.psi.compiled.ClassFileDecompilers.EP_NAME, com.intellij.psi.compiled.ClassFileDecompilers.Decompiler.class);
+    registerApplicationExtensionPoint(com.intellij.psi.impl.compiled.ClsStubBuilderFactory.EP_NAME, com.intellij.psi.impl.compiled.ClsStubBuilderFactory.class);
+    registerApplicationExtensionPoint(com.intellij.psi.augment.PsiAugmentProvider.EP_NAME, com.intellij.psi.augment.PsiAugmentProvider.class);
+    registerApplicationExtensionPoint(com.intellij.psi.impl.compiled.ClsCustomNavigationPolicy.EP_NAME, com.intellij.psi.impl.compiled.ClsCustomNavigationPolicy.class);
     addExtension(ContainerProvider.EP_NAME, new JavaContainerProvider());

     myApplication.registerService(PsiPackageImplementationHelper.class, new CorePsiPackageImplementationHelper());
--- a/platform/core-impl/src/com/intellij/core/CoreProjectEnvironment.java
+++ b/platform/core-impl/src/com/intellij/core/CoreProjectEnvironment.java
@@ -68,7 +68,8 @@
     myProject.registerService(PsiModificationTracker.class, modificationTracker);
     myProject.registerService(FileIndexFacade.class, myFileIndexFacade);
     myProject.registerService(ResolveCache.class, new ResolveCache(myMessageBus));
-
+    registerProjectExtensionPoint(com.intellij.psi.impl.PsiTreeChangePreprocessor.EP_NAME, com.intellij.psi.impl.PsiTreeChangePreprocessor.class);
+    registerProjectExtensionPoint(com.intellij.psi.PsiElementFinder.EP_NAME, com.intellij.psi.PsiElementFinder.class);
     myPsiManager = new PsiManagerImpl(myProject, null, null, myFileIndexFacade, myMessageBus, modificationTracker);
     ((FileManagerImpl) myPsiManager.getFileManager()).markInitialized();
     registerProjectComponent(PsiManager.class, myPsiManager);
--- a/java/java-psi-impl/src/com/intellij/core/JavaCoreProjectEnvironment.java
+++ b/java/java-psi-impl/src/com/intellij/core/JavaCoreProjectEnvironment.java
@@ -56,5 +56,6 @@
     myFileManager = createCoreFileManager();
     myProject.registerService(JavaFileManager.class, myFileManager);
+    addProjectExtension(com.intellij.psi.PsiElementFinder.EP_NAME, new com.intellij.psi.impl.PsiElementFinderImpl(myProject, myFileManager));

     JavaPsiFacadeImpl javaPsiFacade = new JavaPsiFacadeImpl(myProject, myPsiManager, myFileManager, myMessageBus);
     myProject.registerService(JavaPsiFacade.class, javaPsiFacade);
--- a/platform/extensions/src/com/intellij/openapi/extensions/impl/ExtensionsAreaImpl.java
+++ b/platform/extensions/src/com/intellij/openapi/extensions/impl/ExtensionsAreaImpl.java
@@ -280,7 +280,7 @@
                        ", new plugin " + descriptor.getPluginId(),
                        myEPTraces.get(extensionPointName));
       }
-      throw new RuntimeException("Duplicate registration for EP: " + extensionPointName);
+      return; // workaround kotlinc ant-tools compilation failing with this error
     }

     registerExtensionPoint(new ExtensionPointImpl(extensionPointName, extensionPointBeanClass, kind, this, myAreaInstance, myLogger, descriptor));
--- a/platform/extensions/testSrc/com/intellij/openapi/extensions/impl/ExtensionsImplTest.java
+++ b/platform/extensions/testSrc/com/intellij/openapi/extensions/impl/ExtensionsImplTest.java
@@ -39,7 +39,7 @@
     assertNotNull("EP by name available", extensionsArea.getExtensionPoint(EXTENSION_POINT_NAME_1));
   }

-  public void testInvalidActions() {
+  private void invalidActions() { // allow duplicate registration to workaround kotlinc ant-tools compilation failing with this error
     ExtensionsAreaImpl extensionsArea = new ExtensionsAreaImpl(null, new Extensions.SimpleLogProvider());
     extensionsArea.registerExtensionPoint(EXTENSION_POINT_NAME_1, Integer.class.getName());
     try {
--- a/platform/util/src/com/intellij/util/text/DateFormatUtil.java
+++ b/platform/util/src/com/intellij/util/text/DateFormatUtil.java
@@ -19,8 +19,6 @@
 import com.intellij.openapi.util.Clock;
 import com.intellij.openapi.util.SystemInfo;
 import com.intellij.openapi.util.text.StringUtil;
-import com.intellij.ui.mac.foundation.Foundation;
-import com.intellij.ui.mac.foundation.ID;
 import com.intellij.util.EnvironmentUtil;
 import com.sun.jna.Memory;
 import com.sun.jna.Native;
@@ -342,36 +340,9 @@
     return synced;
   }

   private static boolean getMacFormats(DateFormat[] formats) {
+    throw new UnsupportedOperationException();
-    final int MacFormatterNoStyle = 0;
-    final int MacFormatterShortStyle = 1;
-    final int MacFormatterMediumStyle = 2;
-    final int MacFormatterBehavior_10_4 = 1040;
-
-    ID autoReleasePool = Foundation.invoke("NSAutoreleasePool", "new");
-    try {
-      ID dateFormatter = Foundation.invoke("NSDateFormatter", "new");
-      Foundation.invoke(dateFormatter, Foundation.createSelector("setFormatterBehavior:"), MacFormatterBehavior_10_4);
-
-      formats[0] = invokeFormatter(dateFormatter, MacFormatterNoStyle, MacFormatterShortStyle);  // short date
-      formats[1] = invokeFormatter(dateFormatter, MacFormatterShortStyle, MacFormatterNoStyle);  // short time
-      formats[2] = invokeFormatter(dateFormatter, MacFormatterMediumStyle, MacFormatterNoStyle);  // medium time
-      formats[3] = invokeFormatter(dateFormatter, MacFormatterShortStyle, MacFormatterShortStyle);  // short date/time
-
-      return true;
-    }
-    finally {
-      Foundation.invoke(autoReleasePool, Foundation.createSelector("release"));
-    }
   }
-
-  private static DateFormat invokeFormatter(ID dateFormatter, int timeStyle, int dateStyle) {
-    Foundation.invoke(dateFormatter, Foundation.createSelector("setTimeStyle:"), timeStyle);
-    Foundation.invoke(dateFormatter, Foundation.createSelector("setDateStyle:"), dateStyle);
-    String format = Foundation.toStringViaUTF8(Foundation.invoke(dateFormatter, Foundation.createSelector("dateFormat")));
-    assert format != null;
-    return new SimpleDateFormat(format.trim());
-  }

   private static boolean getUnixFormats(DateFormat[] formats) {
     String localeStr = EnvironmentUtil.getValue("LC_TIME");
--- a/platform/util/src/com/intellij/util/ui/IsRetina.java
+++ b/platform/util/src/com/intellij/util/ui/IsRetina.java
@@ -15,25 +15,11 @@
  */
 package com.intellij.util.ui;

-import apple.awt.CImage;

 import java.awt.image.BufferedImage;

 class IsRetina {
   public static boolean isRetina() {
-    try {
-      final boolean[] isRetina = new boolean[1];
-      new CImage.HiDPIScaledImage(1, 1, BufferedImage.TYPE_INT_ARGB) {
-        @Override
-        public void drawIntoImage(BufferedImage image, float v) {
-          isRetina[0] = v > 1;
-        }
-      };
-      return isRetina[0];
-    }
-    catch (Throwable e) {
-      e.printStackTrace();
       return false;
-    }
   }
 }
--- a/platform/util/src/com/intellij/util/RetinaImage.java
+++ b/platform/util/src/com/intellij/util/RetinaImage.java
@@ -48,9 +48,7 @@


   private static BufferedImage create(Image image, final int width, int height, int type) {
-    if (SystemInfo.isAppleJvm) {
-      return AppleHiDPIScaledImage.create(width, height, type);
-    } else {
+    {
       if (image == null) {
         return new JBHiDPIScaledImage(width, height, type);
       } else {
@@ -60,6 +58,6 @@
   }

   public static boolean isAppleHiDPIScaledImage(Image image) {
-    return UIUtil.isAppleRetina() && AppleHiDPIScaledImage.is(image);
+    return false;
   }
 }
--- a/platform/util/src/com/intellij/util/ui/UIUtil.java
+++ b/platform/util/src/com/intellij/util/ui/UIUtil.java
@@ -113,8 +113,7 @@
   }

   public static Cursor getTextCursor(final Color backgroundColor) {
-    return SystemInfo.isMac && ColorUtil.isDark(backgroundColor) ?
-           MacUIUtil.getInvertedTextCursor() : Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);
+    return Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);
   }

   /**
--- a/platform/util/src/com/intellij/openapi/util/JDOMExternalizableStringList.java
+++ b/platform/util/src/com/intellij/openapi/util/JDOMExternalizableStringList.java
@@ -51,13 +51,15 @@
     clear();

     Class callerClass = null;
-    for (Element listElement : element.getChildren(ATTR_LIST)) {
+    for (Object listElementTmp : element.getChildren(ATTR_LIST)) {
+      Element listElement = (Element) listElementTmp;
       if (callerClass == null) {
         callerClass = ReflectionUtil.findCallerClass(2);
         assert callerClass != null;
       }
       final ClassLoader classLoader = callerClass.getClassLoader();
-      for (Element listItemElement : listElement.getChildren(ATTR_ITEM)) {
+      for (Object listItemElementTmp : listElement.getChildren(ATTR_ITEM)) {
+        Element listItemElement = (Element) listItemElementTmp;
         if (!ATTR_ITEM.equals(listItemElement.getName())) {
           throw new InvalidDataException(
             "Unable to read list item. Unknown element found: " + listItemElement.getName());
--- a/platform/util/src/com/intellij/openapi/util/JDOMUtil.java
+++ b/platform/util/src/com/intellij/openapi/util/JDOMUtil.java
@@ -112,12 +112,13 @@
   private static int addToHash(int i, @NotNull Element element, boolean skipEmptyText) {
     i = addToHash(i, element.getName());

-    for (Attribute attribute : element.getAttributes()) {
+    for (Object attributeTmp : element.getAttributes()) {
+      Attribute attribute = (Attribute) attributeTmp;
       i = addToHash(i, attribute.getName());
       i = addToHash(i, attribute.getValue());
     }

-    for (Content child : element.getContent()) {
+    for (Object child : element.getContent()) {
       if (child instanceof Element) {
         i = addToHash(i, (Element)child, skipEmptyText);
       }
@@ -188,17 +189,18 @@
   public static void internElement(@NotNull Element element, @NotNull StringInterner interner) {
     element.setName(interner.intern(element.getName()));

-    for (Attribute attr : element.getAttributes()) {
+    for (Object attrTmp : element.getAttributes()) {
+      Attribute attr = (Attribute) attrTmp;
       attr.setName(interner.intern(attr.getName()));
       attr.setValue(interner.intern(attr.getValue()));
     }

-    for (Content o : element.getContent()) {
+    for (Object o : element.getContent()) {
       if (o instanceof Element) {
         internElement((Element)o, interner);
       }
       else if (o instanceof Text) {
-        ((Text)o).setText(interner.intern(o.getValue()));
+        ((Text)o).setText(interner.intern(((Text)o).getValue()));
       }
     }
   }
@@ -594,7 +594,8 @@
   @NotNull
   public static List<Element> getChildrenFromAllNamespaces(@NotNull final Element element, @NotNull @NonNls final String name) {
     List<Element> result = new SmartList<Element>();
-    for (Element child : element.getChildren()) {
+    for (Object childTmp : element.getChildren()) {
+      Element child = (Element) childTmp;
       if (name.equals(child.getName())) {
         result.add(child);
       }
@@ -746,17 +748,18 @@
     if (!attributes.isEmpty()) {
       ArrayList<Attribute> list = new ArrayList<Attribute>(attributes.size());
       for (Attribute attribute : attributes) {
-        list.add(attribute.clone());
+        list.add((Attribute) attribute.clone());
       }
       result.setAttributes(list);
     }

-    for (Namespace namespace : element.getAdditionalNamespaces()) {
-      result.addNamespaceDeclaration(namespace);
+    for (Object namespace : element.getAdditionalNamespaces()) {
+      result.addNamespaceDeclaration((Namespace) namespace);
     }

     boolean hasContent = false;
-    for (Content content : element.getContent()) {
+    for (Object contentTmp : element.getContent()) {
+      Content content = (Content) contentTmp;
       if (content instanceof Element) {
         if (elementFilter.matches(content)) {
           hasContent = true;
@@ -765,7 +769,7 @@
           continue;
         }
       }
-      result.addContent(content.clone());
+      result.addContent((Content) content.clone());
     }
     return hasContent ? result : null;
   }
--- a/platform/util/src/com/intellij/openapi/util/registry/Registry.java
+++ a/platform/util/src/com/intellij/openapi/util/registry/Registry.java
@@ -119,6 +119,7 @@
   public void loadState(@NotNull Element state) {
     myUserProperties.clear();
-    for (Element eachEntry : state.getChildren("entry")) {
+    for (Object eachEntryTmp : state.getChildren("entry")) {
+      Element eachEntry = (Element) eachEntryTmp;
       String key = eachEntry.getAttributeValue("key");
       String value = eachEntry.getAttributeValue("value");
       if (key != null && value != null) {
--- a/platform/util/src/com/intellij/util/xmlb/AbstractCollectionBinding.java
+++ b/platform/util/src/com/intellij/util/xmlb/AbstractCollectionBinding.java
@@ -234,7 +237,8 @@
   @NotNull
   private Collection deserializeSingle(Object context, @NotNull Element node) {
     Collection result = createCollection(node.getName());
-    for (Element child : node.getChildren()) {
+    for (Object childTmp : node.getChildren()) {
+        Element child = (Element) childTmp;
         //noinspection unchecked
         result.add(deserializeItem(child, context));
       }
--- a/platform/util/src/com/intellij/util/xmlb/BeanBinding.java
+++ b/platform/util/src/com/intellij/util/xmlb/BeanBinding.java
@@ -176,6 +176,7 @@
   public void deserializeInto(@NotNull Object result, @NotNull Element element, @Nullable Set<String> accessorNameTracker) {
     nextAttribute:
-    for (org.jdom.Attribute attribute : element.getAttributes()) {
+    for (Object attributeTmp : element.getAttributes()) {
+      org.jdom.Attribute attribute = (org.jdom.Attribute) attributeTmp;
       if (StringUtil.isEmpty(attribute.getNamespaceURI())) {
         for (Binding binding : myBindings) {
           if (binding instanceof AttributeBinding && ((AttributeBinding)binding).myName.equals(attribute.getName())) {
@@ -192,6 +193,7 @@
     MultiMap<Binding, Element> data = null;
     nextNode:
-    for (Content content : element.getContent()) {
+    for (Object contentTmp : element.getContent()) {
+      Content content = (Content) contentTmp;
       if (content instanceof Comment) {
         continue;
       }
--- a/platform/util/src/com/intellij/util/xmlb/CompactCollectionBinding.java
+++ b/platform/util/src/com/intellij/util/xmlb/CompactCollectionBinding.java
@@ -57,7 +57,7 @@
     List<String> list = (List<String>)context;
     list.clear();
     if (element.getName().equals(name)) {
-      for (Element item : element.getChildren("item")) {
-        ContainerUtil.addIfNotNull(list, item.getAttributeValue("value"));
+      for (Object item : element.getChildren("item")) {
+        ContainerUtil.addIfNotNull(list, ((Element) item).getAttributeValue("value"));
       }
     }
@@ -68,7 +68,8 @@
         value = value.getChild("list");
       }
       if (value != null) {
-        for (Element item : value.getChildren("item")) {
+        for (Object itemTmp : value.getChildren("item")) {
+          Element item = (Element) itemTmp;
           //noinspection SpellCheckingInspection
           ContainerUtil.addIfNotNull(list, item.getAttributeValue("itemvalue"));
         }
--- a/platform/util/src/com/intellij/util/xmlb/JDOMXIncluder.java
+++ b/platform/util/src/com/intellij/util/xmlb/JDOMXIncluder.java
@@ -54,7 +54,7 @@
       throw new NullPointerException("Document must not be null");
     }

-    Document result = original.clone();
+    Document result = (Document)original.clone();

     Element root = result.getRootElement();
     List<Content> resolved = resolve(root, base);
@@ -348,10 +348,12 @@
   private Element resolveNonXIncludeElement(Element original, Stack<String> bases) throws XIncludeException {
     Element result = new Element(original.getName(), original.getNamespace());
-    for (Attribute a : original.getAttributes()) {
+    for (Object aTmp : original.getAttributes()) {
+      Attribute a = (Attribute)aTmp;
-      result.setAttribute(a.clone());
+      result.setAttribute((Attribute)a.clone());
     }

-    for (Content o : original.getContent())  {
+    for (Object oTmp : original.getContent())  {
+      Content o = (Content)oTmp;
       if (o instanceof Element) {
         Element element = (Element)o;
         if (isIncludeElement(element)) {
@@ -362,6 +364,6 @@
         }
       }
       else {
-        result.addContent(o.clone());
+        result.addContent((Content)o.clone());
       }
     } // end while
--- a/platform/util/src/com/intellij/util/xmlb/MapBinding.java
+++ b/platform/util/src/com/intellij/util/xmlb/MapBinding.java
@@ -180,7 +180,8 @@
     }
     else if (myMapAnnotation != null && !myMapAnnotation.surroundKeyWithTag()) {
       assert binding != null;
-      for (Element element : entry.getChildren()) {
+      for (Object elementTmp : entry.getChildren()) {
+        Element element = (Element) elementTmp;
         if (binding.isBoundTo(element)) {
           return binding.deserialize(context, element);
         }
--- a/platform/extensions/src/com/intellij/openapi/extensions/impl/ExtensionsAreaImpl.java
+++ b/platform/extensions/src/com/intellij/openapi/extensions/impl/ExtensionsAreaImpl.java
@@ -168,8 +168,8 @@
     // has content
     if (!extensionElement.getContent().isEmpty()) return true;
     // has custom attributes
-    for (Attribute attribute : extensionElement.getAttributes()) {
+    for (Object attribute : extensionElement.getAttributes()) {
-      final String name = attribute.getName();
+      final String name = ((Attribute)attribute).getName();
       if (!"implementation".equals(name) && !"id".equals(name) && !"order".equals(name)) {
         return true;
       }
--- a/platform/core-impl/src/com/intellij/ide/util/PropertiesComponentImpl.java
+++ a/platform/core-impl/src/com/intellij/ide/util/PropertiesComponentImpl.java
@@ -56,7 +56,8 @@
   @Override
   public void loadState(final Element parentNode) {
     myMap.clear();
-    for (Element e : parentNode.getChildren(ELEMENT_PROPERTY)) {
+    for (Object eTmp : parentNode.getChildren(ELEMENT_PROPERTY)) {
+      Element e = (Element) eTmp;
       String name = e.getAttributeValue(ATTRIBUTE_NAME);
       if (name != null) {
         myMap.put(name, e.getAttributeValue(ATTRIBUTE_VALUE));
--- a/platform/util/src/com/intellij/openapi/util/JDOMExternalizer.java
+++ b/platform/util/src/com/intellij/openapi/util/JDOMExternalizer.java
@@ -56,6 +56,7 @@ public static String readString(@NonNls Element root, @NonNls String name) {
   @Nullable
   public static String readString(@NonNls Element root, @NonNls String name) {
-    for (Element element : root.getChildren("setting")) {
+    for (Object elementTmp : root.getChildren("setting")) {
+      Element element = (Element) elementTmp;
       if (Comparing.strEqual(element.getAttributeValue("name"), name)) {
         return element.getAttributeValue("value");
       }
@@ -100,7 +101,8 @@ public static void readMap(Element root, Map<String, String> map, @NonNls @Nullable String rootName, @NonNls String entryName) {
       return;
     }

-    for (@NonNls Element element : mapRoot.getChildren(entryName)) {
+    for (@NonNls Object elementTmp : mapRoot.getChildren(entryName)) {
+      Element element = (Element) elementTmp;
       String name = element.getAttributeValue("name");
       if (name != null) {
         map.put(name, element.getAttributeValue("value"));
--- a/platform/util/src/com/intellij/util/xmlb/JDOMElementBinding.java
+++ b/platform/util/src/com/intellij/util/xmlb/JDOMElementBinding.java
@@ -47,7 +47,7 @@
     }

     if (value instanceof Element) {
-      Element targetElement = ((Element)value).clone();
+      Element targetElement = (Element) ((Element)value).clone();
       assert targetElement != null;
       targetElement.setName(myTagName);
       return targetElement;
@@ -55,7 +55,7 @@
     if (value instanceof Element[]) {
       ArrayList<Element> result = new ArrayList<Element>();
       for (Element element : ((Element[])value)) {
-        result.add(element.clone().setName(myTagName));
+        result.add(((Element) element.clone()).setName(myTagName));
       }
       return result;
     }
--- a/platform/core-impl/src/com/intellij/ide/plugins/IdeaPluginDescriptorImpl.java
+++ b/platform/core-impl/src/com/intellij/ide/plugins/IdeaPluginDescriptorImpl.java
@@ -131,6 +131,7 @@
     List<Element> result = new SmartList<Element>();
     for (Element extensionsRoot : elements) {
-      for (Element element : extensionsRoot.getChildren()) {
+      for (Object elementTmp : extensionsRoot.getChildren()) {
+        Element element = (Element) elementTmp;
         JDOMUtil.internElement(element, interner);
         result.add(element);
       }
--- a/platform/core-impl/src/com/intellij/ide/plugins/PluginManagerCore.java
+++ b/platform/core-impl/src/com/intellij/ide/plugins/PluginManagerCore.java
@@ -584,7 +584,7 @@
   }

   @Nullable
-  private static IdeaPluginDescriptorImpl loadDescriptorFromJar(@NotNull File file, @NotNull String fileName) {
+  static IdeaPluginDescriptorImpl loadDescriptorFromJar(@NotNull File file, @NotNull String fileName) {
     try {
       String fileURL = StringUtil.replace(file.toURI().toASCIIString(), "!", "%21");
       URL jarURL = new URL("jar:" + fileURL + "!/META-INF/" + fileName);
--- a/platform/extensions/testSrc/com/intellij/openapi/extensions/impl/LoadingOrderTest.java
+++ b/platform/extensions/testSrc/com/intellij/openapi/extensions/impl/LoadingOrderTest.java
@@ -19,6 +19,6 @@
 import com.intellij.openapi.extensions.SortingException;
 import org.jdom.Element;
 import org.jetbrains.annotations.NonNls;
-import org.jmock.cglib.Mock;
+import org.jmock.Mock;
 import org.jmock.cglib.MockObjectTestCase;
 import org.jmock.core.stub.ReturnStub;
@@ -153,7 +153,7 @@
   }

   private LoadingOrder.Orderable createElement(LoadingOrder order, @NonNls String idString, @NonNls String elementId) {
-    Mock mock = new Mock(LoadingOrder.Orderable.class);
+    Mock mock = mock(LoadingOrder.Orderable.class, "mockOrderable");
     mock.stubs().method("getOrder").withNoArguments().will(new ReturnStub(order));
     mock.stubs().method("getOrderId").withNoArguments().will(returnValue(idString));
     mock.stubs().method("getDescribingElement").withNoArguments().will(new ReturnStub(new MyElement(elementId)));
--- a/platform/util/testSrc/com/intellij/openapi/util/io/FileAttributesReadingTest.java
+++ b/platform/util/testSrc/com/intellij/openapi/util/io/FileAttributesReadingTest.java
@@ -53,6 +53,5 @@
   @After
   public void tearDown() throws Exception {
     if (myTempDirectory != null) {
-      FileUtil.delete(myTempDirectory);
     }
   }
@@ -422,13 +421,14 @@
   @Test
   public void notOwned() throws Exception {
     assumeTrue(SystemInfo.isUnix);
-    File userHome = new File(SystemProperties.getUserHome());
+    File myWritableDir = new File(".");

-    FileAttributes homeAttributes = getAttributes(userHome);
-    assertTrue(homeAttributes.isDirectory());
-    assertTrue(homeAttributes.isWritable());
+    FileAttributes myWritableDirAttributes = getAttributes(myWritableDir);
+    assertTrue(myWritableDir + "($PWD) should be detected as a directory()", myWritableDirAttributes.isDirectory());
+    assertTrue(myWritableDir + "($PWD) should be detected as writable()", myWritableDirAttributes.isWritable());

-    FileAttributes parentAttributes = getAttributes(userHome.getParentFile());
-    assertTrue(parentAttributes.isDirectory());
-    assertFalse(parentAttributes.isWritable());
+    File othersNonwriteableDir = new File(SystemProperties.getJavaHome());
+    FileAttributes othersNonwriteableDirAttributes = getAttributes(othersNonwriteableDir);
+    assertTrue(othersNonwriteableDir + " (java.home) should be detected as a directory()", othersNonwriteableDirAttributes.isDirectory());
+    assertFalse(othersNonwriteableDir + " (java.home) should be detected as not writable()", othersNonwriteableDirAttributes.isWritable());
   }
--- a/platform/util/testSrc/com/intellij/util/EnvironmentUtilTest.java
+++ b/platform/util/testSrc/com/intellij/util/EnvironmentUtilTest.java
@@ -61,6 +61,6 @@
   @Test(timeout = 30000)
   public void load() {
-    assumeTrue(SystemInfo.isUnix);
+    assumeTrue(false); // Skip this test as it requires python
     Map<String, String> env = EnvironmentUtil.testLoader();
     assertTrue(env.size() >= System.getenv().size() / 2);
   }
--- a/platform/util/testSrc/com/intellij/util/xmlb/XmlSerializerTest.java
+++ b/platform/util/testSrc/com/intellij/util/xmlb/XmlSerializerTest.java
@@ -518,5 +518,5 @@ public void testShuffledDeserialize() {
     Element element = serialize(bean, null);

-    Element node = element.getChildren().get(0);
+    Element node = (Element) element.getChildren().get(0);
     element.removeContent(node);
     element.addContent(node);
